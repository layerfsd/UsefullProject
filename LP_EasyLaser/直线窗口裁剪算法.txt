裁剪分类 
| [<<] [>>] 
--------------------------------------------------------------------------------
 
 
    在使用计算机处理图形信息时，计算机内部存储的图形往往比较大，而屏幕显示的只是图的一部分。因此需要确定图形中哪些部分落在显示区之内，哪些落在显示区之外，以便只显示落在显示区内的那部分图形。这个选择过程称为裁剪。最简单的裁剪方法是把各种图形扫描转换为点之后，再判断各点是否在窗内。但那样太费时，一般不可取。这是因为有些图形组成部分全部在窗口外，可以完全排除，不必进行扫描转换。所以一般采用先裁剪再扫描转换的方法。



(a)裁剪前                       (b) 裁剪后

图2.5.1 多边形裁剪

　　直线段裁剪

　　直线段裁剪算法比较简单，但非常重要，是复杂图元裁剪的基础。因为复杂的曲线可以通过折线段来近似，从而裁剪问题也可以化为直线段的裁剪问题。常用的线段裁剪方法有三种：Cohen-Sutherland,中点分割算法和梁友栋－barskey算法。

　　Cohen-Sutherland裁剪

    该算法的思想是：对于每条线段P1P2分为三种情况处理。（1）若P1P2完全在窗口内，则显示该线段P1P2简称“取”之。（2）若P1P2明显在窗口外，则丢弃该线段，简称“弃”之。（3）若线段既不满足“取”的条件，也不满足“弃”的条件，则在交点处把线段分为两段。其中一段完全在窗口外，可弃之。然后对另一段重复上述处理。

   为使计算机能够快速判断一条直线段与窗口属何种关系，采用如下编码方法。延长窗口的边，将二维平面分成九个区域。每个区域赋予4位编码CtCbCrCl。其中各位编码的定义如下：


    裁剪一条线段时，先求出P1P2所在的区号code1,code2。若code1=0,且code2=0，则线段P1P2在窗口内，应取之。若按位与运算code1&code2≠0，则说明两个端点同在窗口的上方、下方、左方或右方。可判断线段完全在窗口外，可弃之。否则，按第三种情况处理。求出线段与窗口某边的交点，在交点处把线段一分为二，其中必有一段在窗口外，可弃之。在对另一段重复上述处理。在实现本算法时，不必把线段与每条窗口边界依次求交，只要按顺序检测到端点的编码不为0，才把线段与对应的窗口边界求交。 

 Cohen-Sutherland裁减算法

#define LEFT 1

#define RIGHT 2

#define BOTTOM 4

#define TOP 8

int encode(float x,float y)

{ int c=0;

  if(x<XL) c|=LEFT;

  if(x>XR) c|=RIGHT;

  if(x<YB) c|=BOTTOM;

  if(x<YT) c|=TOP;

  retrun c;

}

void  CS_LineClip(x1,y1,x2,y2,XL,XR,YB,YT)

float x1,y1,x2,y2,XL,XR,YB,YT;

//(x1,y1)(x2,y2)为线段的端点坐标，其他四个参数定义窗口的边界

{ int code1,code2,code;

  code1=encode(x1,y1);

  code2=encode(x2,y2);

  while(code1!=0 ||code2!=0)

  { if(code1&code2 !=0) return;

    code = code1;

    if(code1==0) code = code2;

    if(LEFT&code !=0)

    { x=XL;

      y=y1+(y2-y1)*(XL-x1)/(x2-x1);

}

    else if(RIGHT&code !=0)

    { x=XR;

      y=y1+(y2-y1)*(XR-x1)/(x2-x1);

     }

    else if(BOTTOM&code !=0)

    { y=YB;

x=x1+(x2-x1)*(YB-y1)/(y2-y1);

}

else if(TOP & code !=0)

{ y=YT;

  x=x1+(x2-x1)*(YT-y1)/(y2-y1);

}

     if(code ==code1)

{  x1=x;y1=y; code1 =encode(x,y);}

else

{ x2=x;y2=y; code2 =encode(x,y);}

  }

  displayline（x1,y1,x2,y2);

}

　　中点分割裁剪算法

    中点分割算法的大意是，与前一种Cohen-Sutherland算法一样首先对线段端点进行编码，并把线段与窗口的关系分为三种情况: 全在、完全不在和线段和窗口有交。对前两种情况，进行一样的处理。对于第三种情况，用中点分割的方法求出线段与窗口的交点。即从P0点出发找出距P0最近的可见点A和从P1点出发找出距P1最近的可见点B，两个可见点之间的连线即为线段P0P1的可见部分。从P0出发找最近可见点采用中点分割方法：先求出P0P1的中点Pm,若P0Pm不是显然不可见的，并且P0P1在窗口中有可见部分，则距P0最近的可见点一定落在P0Pm上，所以用P0Pm代替P0P1；否则取PmP1代替P0P1。再对新的P0P1求中点Pm。重复上述过程，直到PmP1长度小于给定的控制常数为止，此时Pm收敛于交点。由于该算法的主要计算过程只用到加法和除2运算，所以特别适合硬件实现，同时也适合于并行计算。

 　梁友栋－Barskey算法

   梁友栋和Barskey提出了更快的参数化裁剪算法。首先按参数化形式写出裁剪条件： 

 

   这四个不等式可以表示为形式：upk≤qk

其中，参数pk,qk定义为：

 

    任何平行于裁剪边界之一的直线 pk=0，其中k对应于裁剪边界（k=1,2,3,4对应于左、右、下、上边界）如果还满足qk<0，则线段完全在边界外，舍弃该线段。如果qk≥0，则该线段平行于裁剪边界并且在窗口内。

    当pk<0,线段从裁剪边界延长线的外部延伸到内部。当pk>0,线段从裁剪边界延长线的内部延伸到外部。当pk≠0，可以计算出线段与边界k的延长线的交点的u值：u=qk/pk。

    对于每条直线，可以计算出参数u1和u2，它们定义了在裁剪矩形内的线段部分。u1的值由线段从外到内遇到的矩形边界所决定(p<0)。对这些边界计算rk=qk/pk。u1取0和各个rk值之中的最大值。u2的值由线段从内到外遇到的矩形边界所决定(p>0)。对这些边界计算rk=qk/pk。u2取1和各个rk值之中的最小值。如果u1>u2，则线段完全落在裁剪窗口之外，被舍弃。否则裁剪线段由参数u的两个值u1,u2计算出来。

　　梁友栋―Barskey算法

void LB_LineClip(x1,y1,x2,y2,XL,XR,YB,YT)

float x1,y1,x2,y2,XL,XR,YB,YT;

{ float dx,dy,u1,u2;

  tl=0;tu=1;

  dx =x2-x1;

  dy =y2-y1;

  if(ClipT(-dx,x1-Xl,&u1,&u2)

    if(ClipT(dx,XR-x1, &u1,&u2)

if(ClipT(-dy,y1-YB, &u1,&u2)

       if(ClipT(dy,YT-y1, &u1,&u2)

{ displayline(x1+u1*dx,y1+u1*dy, x1+u2*dx,y1+u2*dy)

   return;

         }

}

bool ClipT(p,q,u1,u2)

float p,q,*u1,*u2;

{ float r;

  if(p<0)

   { r=q/p;

     if(r>*u2)return FALSE;

     else if(r>*u1)

     { *u1=r;

        return TRUE;

     }

   }

  else if(p>0)

  { r=p/q;

    if(r<*u1) return FALSE;

    else if(r<*u2)

    { *u2=r;

      return TRUE;

    }

  }

  else if(q<0) return FALSE;

  return TRUE;

}
 
